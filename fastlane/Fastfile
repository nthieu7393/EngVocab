default_platform :ios
platform :ios do

 desc 'Start.......'
 lane :rebuild_signing do
  Dotenv.overload ".env.secret"
  # 2
  app_store_connect_api_key(
    key_id: ENV["ASC_KEY_ID"],
    issuer_id: ENV["ASC_KEY_ISSUER_ID"],
    key_content: ENV["ASC_KEY_CONTENT"],
    is_key_content_base64: true
  )

  # 3
  create_keychain({
    name: ENV["MATCH_KEYCHAIN_NAME"],
    password: "",
    default_keychain: true,
    lock_when_sleeps: true,
    unlock: true
  })

  # 4
  ios_bundle_ids = [
    'com.hieunguyen.eng.vocab',
    # any additional iOS bundle identifiers
  ]

  # 5s
  # match_nuke({
  #   type: "appstore",
  #   readonly: false,
  #   app_identifier: ios_bundle_ids
  # })

  # 6
  match({
    type: "development"
    # readonly: false,
    # app_identifier: ios_bundle_ids,
    # git_basic_authorization: Base64.strict_encode64("nt.hieu7393@gmail.com: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"),
    # keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
    # keychain_password: ENV["MATCH_KEYCHAIN_PASSWORD"]
    # platform: 'ios'
  })
 end

 #  desc 'Load ASC API Key information to use in subsequent lanes'
 lane :load_asc_api_key do
   app_store_connect_api_key(
     key_id: 'KFM853VPH8',
     issuer_id: '3bfff8be-a470-48b5-9d2f-7ed90a062e21',
     key_content: 'LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR1RBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJIa3dkd0lCQVFRZ1lqMllLd3BTNHR0SDA2WHgKaHgzM1pNMXltMXJqaHRET0tpMHVHeFFlR3oyZ0NnWUlLb1pJemowREFRZWhSQU5DQUFUZGs4Tk9ha0JHTnMwOApYKy9pWnIyVnVIN1BqZmttZVVOaHpsWWNUL2FseXBBTEMxeTd3aVc5cE1WaVhtMEVGVTlrK2VFZ1g0SDhtVm9xCnpTWjRxNkRNCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=',
     is_key_content_base64: true,
     in_house: false
   )
 end

 desc 'Upload to TestFlight / ASC'
 lane :upload_release do
  api_key = app_store_connect_api_key(
    key_id: 'KFM853VPH8',
    issuer_id: '3bfff8be-a470-48b5-9d2f-7ed90a062e21',
    key_content: 'LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR1RBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJIa3dkd0lCQVFRZ1lqMllLd3BTNHR0SDA2WHgKaHgzM1pNMXltMXJqaHRET0tpMHVHeFFlR3oyZ0NnWUlLb1pJemowREFRZWhSQU5DQUFUZGs4Tk9ha0JHTnMwOApYKy9pWnIyVnVIN1BqZmttZVVOaHpsWWNUL2FseXBBTEMxeTd3aVc5cE1WaVhtMEVGVTlrK2VFZ1g0SDhtVm9xCnpTWjRxNkRNCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=',
    is_key_content_base64: true,
    in_house: false
  )
  
  
  # lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
  puts api_key
 
  deliver(
      api_key: api_key,
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true,
      force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
      run_precheck_before_submit: false # not supported through ASC API yet
  )
 end

#  before_all do 
#   create_keychain(
#         name: "actiontest_keychain",
#         password: "meow",
#         default_keychain: true,
#         unlock: true,
#         timeout: 3600,
#         lock_when_sleeps: false
#     )
#  end


#  desc 'Load ASC API Key information to use in subsequent lanes'
#  lane :load_asc_api_key do
#    app_store_connect_api_key(
#      key_id: '3N85JSSJVX',
#      issuer_id: '3bfff8be-a470-48b5-9d2f-7ed90a062e21',
#      key_content: 'LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR1RBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJIa3dkd0lCQVFRZ1IwZm83R3JPWkNGalcybUUKc3F2SnNmenVkTkc2Y0orMSt0bmwvS1JzMmNLZ0NnWUlLb1pJemowREFRZWhSQU5DQUFTUWhRU05ycFg2eE13WApKM1g2NzQvYm8xeEVOMUhwQ1N2Y1hNS0xBSkpwVGYrZ3VTRUlzdEd0UnhDR3JMWWZ6OXlCRk1mTzRZSFBHME55ClBGejY0ZEFwCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=',
#      is_key_content_base64: true,
#      in_house: false
#    )
#  end

#  desc 'Bump build number based on most recent TestFlight build number'
#  lane :fetch_and_increment_build_number do
#   #fetch read your app identifier defined in your Appfile
#   app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
#   api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
 
#   current_version = get_version_number(
#     target: 'EngVocab' # replace with your main target, required if you have more than one non-test target
#   )
#   latest_build_number = latest_testflight_build_number(
#     api_key: api_key,
#     version: current_version,
#     app_identifier: app_identifier
#   )
#   increment_build_number(
#     build_number: (latest_build_number + 1),
#   )
#  end

#  desc 'Check certs and profiles'
#  lane :prepare_signing do |options|
#   app_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
#   api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
#   profile_name = 'EngVocab App Provisioning Profile' # replace with the name of your existing profile, or define a name for the profile that fastlane will create if it’s not found
 
#   # cert(
#   #     api_key: api_key,
#   #     keychain_path: lane_context[SharedValues::CERT_FILE_PATH] # the path to the keychain where your certificates are stored
#   #   )
 
#   # main app profile
#   sigh(
#     api_key: api_key,
#     app_identifier: app_id,
#     provisioning_name: profile_name,
#     force: true # always recreate this exact profile to ensure it's valid and not expired
#   )
#  end

#  desc 'Build the iOS app for release'
#  lane :build_release do |options|
#   app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
 
#   profile_name = 'EngVocab Provisioning Profile' # the name of the profile to use for the build
#   output_name = 'EngVocab-iOS' # specify the name of the .ipa file to generate
#   export_method = 'app-store' # specify the export method
#   compile_bitcode = false # specify whether to enable bitcode
 
#   # turn off automatic signing during build so correct code signing identity is guaranteed to be used
#   update_code_signing_settings(
#     use_automatic_signing: false,
#     targets: ['EngVocab'], # specify which targets to update code signing settings for
#     code_sign_identity: 'Apple Distribution', # replace with name of code signing identity if different
#     bundle_identifier: app_identifier,
#     profile_name: profile_name,
#     build_configurations: ['Release'] # only toggle code signing settings for Release configurations
#   )
 
#   # build the app
#   gym(
#     scheme: 'EngVocab', # replace with name of your project’s scheme
#     output_name: output_name,
#     configuration: 'Release',
#     export_options: {
#       method: export_method,
#       provisioningProfiles: {
#         app_identifier => profile_name
#       },
#       compileBitcode: compile_bitcode
#     }
#   )
#  end

#  desc 'Upload to TestFlight / ASC'
#  lane :upload_release do
#   api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
 
#   deliver(
#       api_key: api_key,
#       skip_screenshots: true,
#       skip_metadata: true,
#       skip_app_version_update: true,
#       force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
#       run_precheck_before_submit: false # not supported through ASC API yet
#   )
#  end

#  desc 'Create keychain'
#  lane :creates_keychain do
#   create_keychain(
#     name: 'EngVocab_test',
#     password: '12345',
#     default_keychain: true,
#     unlock: true,
#     timeout: 3600,
#     lock_when_sleeps: true
#   )
#  end

 desc 'Build and upload to TestFlight'
 lane :build_upload_testflight do
  rebuild_signing
  upload_release
  #  load_asc_api_key
  #  prepare_signing
  #  fetch_and_increment_build_number
  #  build_release
  #  upload_release
 end



 desc "Run tests"
    lane :tests do
        run_tests(scheme: "EngVocabTests")
    end
    desc "Push a new beta build to TestFlight"
    lane :beta do
        setup_ci
        # match(type: "development")
        build_app(workspace: "EngVocab.xcworkspace", scheme: "EngVocab") # Change name of workspace
        upload_to_testflight(changelog: ENV["CHANGELOG"] || "No changelog provided")
    end
    desc "Sets the version of the bundle to a RELEASE_VERSION passed in as an environment variable"
    lane :set_release_version do
        version = ENV["RELEASE_VERSION"]
        if version 
            UI.message("Setting version to #{version}")
            increment_version_number(version_number: version)
            increment_build_number(build_number: Time.now.to_i)
        else
            UI.user_error!("Environment variable RELEASE_VERSION not set")
        end
    end


 desc 'Build and upload to TestFlight'
    lane :build_testflight do
      beta
      set_release_version
    end

end
